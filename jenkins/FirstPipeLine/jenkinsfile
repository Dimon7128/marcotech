pipeline {
    agent any
    environment {
        DOCKER_HUB_URL = 'dimabu/simplewebserver'
        DOCKER_TAG     = 'latest'
        GIT_REPO       = 'https://github.com/Dimon7128/marcotech.git'
        BRANCH         = 'BranchForJenkins'
        EC2_HOST       = 'ubuntu@172.31.4.146'
    }
       stages {
    
        stage('Checkout') {
            steps {
                git branch: "${BRANCH}", url: "${GIT_REPO}"
            }
        }



        stage('Install HTMLHint') {
            steps {
                sh 'pwd'
                sh 'ls -a'
            }
        }

        stage('Lint Test') {
            steps {
                sh 'htmlhint ./jenkins/FirstPipeLine/simple_web_app/index.html'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${DOCKER_HUB_URL}:${DOCKER_TAG}", "./jenkins/FirstPipeLine/simple_web_app")
                }
            }
        }
        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('', 'dockerhub-credentials') {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Deploy to EC2') {
            steps {
                script {
                    sshagent (credentials: ['dimipimi']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_HOST} << EOF
                            docker stop WebServer || true
                            docker container prune -f
                            docker pull ${DOCKER_HUB_URL}:${DOCKER_TAG}
                            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
                            docker run -d -p 80:80 --name WebServer -e INSTANCE_NAME=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/l
                            atest/meta-data/instance-id) ${DOCKER_HUB_URL}:${DOCKER_TAG}
                        EOF
                        """
                    }
                }
            }
        }
    }
    }



//  pipeline {
   


//         stage('Build Docker Image') {
//             steps {
//                 script {
//                     dockerImage = docker.build("${DOCKER_IMAGE}:${env.BUILD_ID}")
//                 }
//             }
//         }

